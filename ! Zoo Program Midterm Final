#include <iostream>
#include <fstream>
#include <sstream> //another library for files: allows performing insertion, extraction, and other operations.
#include <string>
#include <vector>
#include <cstdlib>  //a part of the C++ standard library collection that provides the input and output methods of <stdio. h> library of C language. 
#include <ctime> //converts the time value pointed to by time to local time in the form of a character string

using namespace std;

class Animal
{
//Every Characteristic of the Animals
private:
    string name;
    string species;
    string furColor;
    string sex;
    int weight;
    int age;
    string id;
//Static Int variables: cannot change
    inline static int numOfAnimals;
    inline static int nextAnimalId = 1;
public:
//Constructor parameter: accepts certain arguments in order to pass
    Animal(string theName, string theSpecies, string thefurColor, string thesex, int theweight, int theage)
    {
//once passed: arguments get put into an algorithm, updated, then returned
        name = theName;
        species = theSpecies;
        furColor = thefurColor;
        sex = thesex;
        weight = theweight;
        age = theage;

        string abbreviation = string(1, tolower(theSpecies[0])) + string(1, tolower(theSpecies[1]));
        id = abbreviation + to_string(nextAnimalId++);

        numOfAnimals++;
    }

//Getters, helps us get information on int main()
    string getAnimalName() const
    {
        return name;
    }
    string getAnimalSpecies() const
    {
        return species;
    }

    string getFurColor() const
    {
        return furColor;
    }

    string getSex() const
    {
        return sex;
    }

    int getWeight() const
    {
        return weight;
    }

    int getAge() const
    {
        return age;
    }

    int getNumOfAnimals() const
    {
        return numOfAnimals;
    }
    string getAnimalId() const
    {
        return id;
    }
};

//Animal Super Classes
class Hyena : public Animal
{
private:
//static variables for number of hyenas and habitat
    static int numOfHyenas;
    static string habitat;

public:
//constructor to only allow certain arguments pass
    Hyena(string theName, string thefurColor, string thesex, int theweight, int theage) : Animal(theName, "Hyena", thefurColor, thesex, theweight, theage)
   //Updating variables down here, if arguments are passed
    {
        numOfHyenas++;
    }

    static string getHabitat()
    {
        return habitat;
    }

    static int getNumOfHyenas()
    {
        return numOfHyenas;
    }
};

//Setting variables to default

int Hyena::numOfHyenas = 0;
string Hyena::habitat = "Savannas"; //Every animal within that domain is given their habitat

//same idea applies to every other class

class Lion : public Animal
{
private:
    static int numOfLions;
    static string habitat;

public:
    Lion(string theName, string thefurColor, string thesex, int theweight, int theage) : Animal(theName, "Lion", thefurColor, thesex, theweight, theage)
    {
        numOfLions++;
    }

    static string getHabitat()
    {
        return habitat;
    }

    static int getNumOfLions()
    {
        return numOfLions;
    }
};

int Lion::numOfLions = 0;
string Lion::habitat = "Savannas";

class Bear : public Animal
{
private:
    static int numOfBears;
    static string habitat;

public:
    Bear(string theName, string thefurColor, string thesex, int theweight, int theage) : Animal(theName, "Bear", thefurColor, thesex, theweight, theage)
    {
        numOfBears++;
    }

    static string getHabitat()
    {
        return habitat;
    }

    static int getNumOfBears()
    {
        return numOfBears;
    }
};

int Bear::numOfBears = 0;
string Bear::habitat = "Forests";

class Tiger : public Animal
{
private:
    static int numOfTigers;
    static string habitat;

public:
    Tiger(string theName, string thefurColor, string thesex, int theweight, int theage) : Animal(theName, "Tiger", thefurColor, thesex, theweight, theage)
    {
        numOfTigers++;
    }

    static string getHabitat()
    {
        return habitat;
    }

    static int getNumOfTigers()
    {
        return numOfTigers;
    }
};

int Tiger::numOfTigers = 0;
string Tiger::habitat = "Grasslands";

class AnimalNode {
public:
    const Animal* animal;
    AnimalNode* next;

    AnimalNode(const Animal* animal) : animal(animal), next(nullptr) {}
};

int main() {

    //random generator: allows the computer to randomly select names for arriving animals.
    srand(static_cast<unsigned>(time(0)));

//hardcoded the names from animalnames.txt:
//parsing the file would be extremely tedious, I would have to read the file and create variables for hyenas, lions, etc...
//i would have to append each name, 
//break them down into separate variables or a variable containing these names.
//Then I would have to put it in a vector similar to this:

    //a class template for sequence containers, allows us to put multiple names in a string
    vector<string> hyenaNames = {"Shenzi", "Banzai", "Ed", "Zig", "Bud", "Lou", "Kamari", "Wema", "Nne", "Madoa", "Prince Nevarah"};
    vector<string> lionNames = {"Scar", "Mufasa", "Simba", "Kiara", "King", "Drooper", "Kimba", "Nala", "Leo", "Samson", "Elsa", "Cecil"};
    vector<string> bearNames = {"Yogi", "Smokey", "Paddington", "Lippy", "Bungle", "Baloo", "Rupert", "Winnie the Pooh", "Snuggles", "Bert"};
    vector<string> tigerNames = {"Tony", "Tigger", "Amber", "Cosimia", "Cuddles", "Dave", "Jiba", "Rajah", "Rayas", "Ryker"};


    fstream myFileArriving;
    myFileArriving.open("C:\\Users\\pined\\Downloads\\arrivingAnimals.txt", ios::in);

    if (!myFileArriving.is_open()) {
        cout << "Error opening the file." << endl;
        return 1;
    }

    string ArrivingHyenaNames, ArrivingLionNames, ArrivingBearNames, ArrivingTigerNames;
    string line2;
    while (getline(myFileArriving, line2)) {
        size_t hyenaPos = line2.find("hyena");
        size_t lionPos = line2.find("lion");
        size_t bearPos = line2.find("bear");
        size_t tigerPos = line2.find("tiger");

        if (hyenaPos != string::npos) {
            string name = hyenaNames[rand() % hyenaNames.size()];
            ArrivingHyenaNames += name + ": " + line2 + "\n";
        } else if (lionPos != string::npos) {
            string name = lionNames[rand() % lionNames.size()];
            ArrivingLionNames += name + ": " + line2 + "\n";
        } else if (bearPos != string::npos) {
            string name = bearNames[rand() % bearNames.size()];
            ArrivingBearNames += name + ": " + line2 + "\n";
        } else if (tigerPos != string::npos) {
            string name = tigerNames[rand() % tigerNames.size()];
            ArrivingTigerNames += name + ": " + line2 + "\n";
        }
    }
    myFileArriving.close();

    vector<Hyena> hyenas;
    vector<Lion> lions;
    vector<Bear> bears;
    vector<Tiger> tigers;

    // Parse arriving hyena names and create objects
    stringstream hyenaStream(ArrivingHyenaNames);
    string hyenaName, hyenaSpecies, hyenaFurColor, hyenaSex, hyenaLine;
    int hyenaWeight, hyenaAge;
    while (getline(hyenaStream, hyenaLine)) {
        stringstream ss(hyenaLine);
        getline(ss, hyenaName, ':');
        getline(ss, hyenaLine);
        stringstream dataStream(hyenaLine);
        dataStream >> hyenaAge >> hyenaSex >> hyenaFurColor >> hyenaWeight;

        Hyena myHyena = Hyena(hyenaName, hyenaFurColor, hyenaSex, hyenaWeight, hyenaAge);
        hyenas.push_back(myHyena);
    }

    // Parse arriving lion names and create objects
    stringstream lionStream(ArrivingLionNames);
    string lionName, lionFurColor, lionSex, lionLine;
    int lionWeight, lionAge;
    while (getline(lionStream, lionLine))
    {
        stringstream ss(lionLine);
        getline(ss, lionName, ':');
        getline(ss, lionLine);
        stringstream dataStream(lionLine);
        dataStream >> lionAge >> lionSex >> lionFurColor >> lionWeight;

        Lion myLion = Lion(lionName, lionFurColor, lionSex, lionWeight, lionAge);
        lions.push_back(myLion);
    }

    // Parse arriving bear names and create Bear objects
    stringstream bearStream(ArrivingBearNames);
    string bearName, bearFurColor, bearSex, bearLine;
    int bearWeight, bearAge;
    while (getline(bearStream, bearLine))
    {
        stringstream ss(bearLine);
        getline(ss, bearName, ':');
        getline(ss, bearLine);
        stringstream dataStream(bearLine);
        dataStream >> bearAge >> bearSex >> bearFurColor >> bearWeight;

        Bear myBear = Bear(bearName, bearFurColor, bearSex, bearWeight, bearAge);
        bears.push_back(myBear);
    }

    // Parse arriving tiger names and create Tiger objects
    stringstream tigerStream(ArrivingTigerNames);
    string tigerName, tigerFurColor, tigerSex, tigerLine;
    int tigerWeight, tigerAge;
    while (getline(tigerStream, tigerLine))
    {
        stringstream ss(tigerLine);
        getline(ss, tigerName, ':');
        getline(ss, tigerLine);
        stringstream dataStream(tigerLine);
        dataStream >> tigerAge >> tigerSex >> tigerFurColor >> tigerWeight;

        Tiger myTiger = Tiger(tigerName, tigerFurColor, tigerSex, tigerWeight, tigerAge);
        tigers.push_back(myTiger);
}
     // Create linked lists for animals
    AnimalNode* hyenaNode = nullptr;
    AnimalNode* lionNode = nullptr;
    AnimalNode* bearNode = nullptr;
    AnimalNode* tigerNode = nullptr;

        // Populate linked lists with animals
    for (const auto& hyena : hyenas) {
        AnimalNode* newNode = new AnimalNode(&hyena);
        newNode->next = hyenaNode;
        hyenaNode = newNode;
    }

    for (const auto& lion : lions) {
        AnimalNode* newNode = new AnimalNode(&lion);
        newNode->next = lionNode;
        lionNode = newNode;
    }

    for (const auto& bear : bears) {
        AnimalNode* newNode = new AnimalNode(&bear);
        newNode->next = bearNode;
        bearNode = newNode;
    }

    for (const auto& tiger : tigers) {
        AnimalNode* newNode = new AnimalNode(&tiger);
        newNode->next = tigerNode;
        tigerNode = newNode;
    }

    // Print animals using the linked lists
    cout << "Hyenas in the zoo:\n";
    AnimalNode* currentHyena = hyenaNode;
    while (currentHyena != nullptr) {
        cout << "ID: " << currentHyena->animal->getAnimalId() << ", Name: " << currentHyena->animal->getAnimalName()
             << ", Species: " << currentHyena->animal->getAnimalSpecies() << ", Age: " << currentHyena->animal->getAge() << "\n";
        currentHyena = currentHyena->next;
    }

    cout << "Lions in the zoo:\n";
    AnimalNode* currentLion = lionNode;
    while (currentLion != nullptr) {
        cout << "ID: " << currentLion->animal->getAnimalId() << ", Name: " << currentLion->animal->getAnimalName()
             << ", Species: " << currentLion->animal->getAnimalSpecies() << ", Age: " << currentLion->animal->getAge() << "\n";
        currentLion = currentLion->next;
    }

    cout << "Bears in the zoo:\n";
    AnimalNode* currentBear = bearNode;
    while (currentBear != nullptr) {
        cout << "ID: " << currentBear->animal->getAnimalId() << ", Name: " << currentBear->animal->getAnimalName()
             << ", Species: " << currentBear->animal->getAnimalSpecies() << ", Age: " << currentBear->animal->getAge() << "\n";
        currentBear = currentBear->next;
    }

    cout << "Tigers in the zoo:\n";
    AnimalNode* currentTiger = tigerNode;
    while (currentTiger != nullptr) {
        cout << "ID: " << currentTiger->animal->getAnimalId() << ", Name: " << currentTiger->animal->getAnimalName()
             << ", Species: " << currentTiger->animal->getAnimalSpecies() << ", Age: " << currentTiger->animal->getAge() << "\n";
        currentTiger = currentTiger->next;
    }

    //Animals that allow us to access GetNumOfAnimals or species
    Animal myAnimal01 = Animal("?", "Hyena","?", "?", 60, 5);
    Hyena myHyena01 = Hyena("?","?", "Male", 1, 1);
    Lion myLion01 = Lion("?","?", "Male", 1, 1);
    Bear myBear01 = Bear("?","?", "Male", 1, 1);
    Tiger myTiger01 = Tiger("?","?", "Male", 1, 1);

    //cout << "\nNumber of Animals: " << myAnimal01.getNumOfAnimals() - 5 << endl;
    //cout << "\nNumber of Hyenas: " << myHyena01.getNumOfHyenas() - 1 << endl;
    //cout << "\nNumber of Lions: " << myLion01.getNumOfLions() - 1 << endl;
    //cout << "\nNumber of Bears: " << myBear01.getNumOfBears() - 1 << endl;
    //cout << "\nNumber of Tigers: " << myTiger01.getNumOfTigers() - 1 << endl;

    return 0;
}

